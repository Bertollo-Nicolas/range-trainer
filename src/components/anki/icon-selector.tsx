'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Search } from 'lucide-react'

interface IconSelectorProps {
  selectedIcon: string
  onIconSelect: (icon: string) => void
}

// Collection d'ic√¥nes organis√©e par cat√©gories
const ICON_CATEGORIES = {
  education: {
    name: 'üéì √âducation',
    icons: [
      'üìö', 'üìñ', 'üìù', 'üìÑ', 'üì∞', 'üìã', 'üìä', 'üìà', 'üìâ', 'üìå',
      'üìç', 'üìé', 'üìê', 'üìè', 'üñäÔ∏è', '‚úèÔ∏è', 'üñçÔ∏è', 'üìò', 'üìô', 'üìó',
      'üìï', 'üìì', 'üìî', 'üìí', 'üìë', 'üóÇÔ∏è', 'üìá', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üìÅ'
    ]
  },
  gaming: {
    name: 'üéÆ Jeux & Poker',
    icons: [
      'üéÆ', 'üÉè', 'üé¥', 'üé≤', 'üéØ', 'üé™', 'üé®', 'üé≠', 'üé¨', 'üé§',
      'üéµ', 'üé∂', 'üé∏', 'üéπ', 'ü•Å', 'üé∫', 'üéª', 'ü™ï', 'üéº', 'üéß',
      'üé¶', 'üìΩÔ∏è', 'üé∞', '‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', 'üî•', 'üíé', 'üëë'
    ]
  },
  science: {
    name: 'üî¨ Science',
    icons: [
      'üî¨', 'üß™', '‚öóÔ∏è', 'üß¨', 'üíä', 'ü©∫', 'üî≠', 'üì°', 'üõ∞Ô∏è', '‚ö°',
      'üîã', 'üí°', 'üîå', 'üß≤', '‚öôÔ∏è', 'üîß', 'üî®', 'üõ†Ô∏è', '‚öñÔ∏è', 'üå°Ô∏è',
      'üßØ', 'üî´', 'üí£', 'üèπ', '‚öîÔ∏è', 'üõ°Ô∏è', 'üöÄ', 'üõ∏', '‚≠ê', 'üåü'
    ]
  },
  nature: {
    name: 'üåø Nature',
    icons: [
      'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üåæ', 'üåµ', 'üå¥', 'üå≥', 'üå≤', 'üå∫',
      'üå∏', 'üåº', 'üåª', 'üå∑', 'üåπ', 'ü•Ä', 'üåä', 'üíß', '‚ùÑÔ∏è', '‚õÑ',
      'üåà', '‚òÄÔ∏è', 'üå§Ô∏è', '‚õÖ', 'üå¶Ô∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå©Ô∏è', 'üå®Ô∏è', '‚òÅÔ∏è'
    ]
  },
  animals: {
    name: 'üêæ Animaux',
    icons: [
      'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
      'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£',
      'üê•', 'ü¶Ü', 'ü¶â', 'ü¶Ö', 'ü¶ã', 'üêõ', 'üêù', 'üêû', 'ü¶ó', 'üï∑Ô∏è'
    ]
  },
  food: {
    name: 'üçé Nourriture',
    icons: [
      'üçé', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí',
      'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'ü•ë', 'üçÜ', 'ü•í', 'ü•¨',
      'ü•ï', 'üåΩ', 'üå∂Ô∏è', 'ü´ë', 'ü•î', 'üç†', 'ü•ê', 'üçû', 'ü•ñ', 'ü•®'
    ]
  },
  transport: {
    name: 'üöó Transport',
    icons: [
      'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê',
      'üõª', 'üöö', 'üöõ', 'üöú', 'üèçÔ∏è', 'üõµ', 'üö≤', 'üõ¥', 'üöÅ', '‚úàÔ∏è',
      'üõ©Ô∏è', 'üöÄ', 'üõ∏', 'üö¢', '‚õµ', 'üö§', '‚õ¥Ô∏è', 'üõ•Ô∏è', 'üöÇ', 'üöá'
    ]
  },
  objects: {
    name: 'üì± Objets',
    icons: [
      'üì±', 'üíª', 'üñ•Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üñ®Ô∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†',
      'üì∫', 'üìª', 'üîä', 'üì¢', 'üì£', 'üìØ', 'üîî', 'üîï', 'üéµ', 'üé∂',
      '‚è∞', '‚è≤Ô∏è', '‚è±Ô∏è', '‚è≥', '‚åõ', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üìá', 'üóÉÔ∏è'
    ]
  },
  symbols: {
    name: '‚ö° Symboles',
    icons: [
      '‚ö°', 'üî•', 'üíé', 'üëë', 'üí∞', 'üí≥', 'üí∏', 'üíµ', 'üí¥', 'üí∂',
      'üí∑', 'ü™ô', 'üí≤', 'üî±', '‚öúÔ∏è', 'üî∞', '‚≠ê', 'üåü', '‚ú®', 'üí´',
      '‚≠ï', '‚ùå', '‚ö†Ô∏è', 'üö´', '‚úÖ', '‚òëÔ∏è', '‚úîÔ∏è', '‚ùé', '‚ûï', '‚ûñ'
    ]
  },
  flags: {
    name: 'üèÅ Drapeaux',
    icons: [
      'üèÅ', 'üè≥Ô∏è', 'üè¥', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è', 'üá´üá∑', 'üá∫üá∏', 'üá¨üáß', 'üá©üá™', 'üá™üá∏',
      'üáÆüáπ', 'üáØüáµ', 'üá®üá≥', 'üá∞üá∑', 'üá∑üá∫', 'üáßüá∑', 'üá®üá¶', 'üá¶üá∫', 'üáÆüá≥', 'üá≤üáΩ',
      'üá≥üá±', 'üá∏üá™', 'üá≥üá¥', 'üá©üá∞', 'üá´üáÆ', 'üá®üá≠', 'üá¶üáπ', 'üáµüá±', 'üáµüáπ', 'üáßüá™'
    ]
  }
}

export function IconSelector({ selectedIcon, onIconSelect }: IconSelectorProps) {
  const [activeTab, setActiveTab] = useState('education')
  const [searchTerm, setSearchTerm] = useState('')

  // Filtrer les ic√¥nes selon la recherche
  const getFilteredIcons = () => {
    if (!searchTerm) {
      return ICON_CATEGORIES[activeTab as keyof typeof ICON_CATEGORIES]?.icons || []
    }
    
    // Recherche dans toutes les cat√©gories
    const allIcons: string[] = []
    Object.values(ICON_CATEGORIES).forEach(category => {
      allIcons.push(...category.icons)
    })
    
    return allIcons.filter(icon => 
      icon.toLowerCase().includes(searchTerm.toLowerCase())
    )
  }

  const filteredIcons = getFilteredIcons()

  return (
    <div className="space-y-3">
      {/* Recherche */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
        <Input
          placeholder="Rechercher une ic√¥ne..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-10"
        />
      </div>

      {/* Tabs des cat√©gories */}
      {!searchTerm && (
        <div className="flex flex-wrap gap-1">
          {Object.entries(ICON_CATEGORIES).map(([key, category]) => (
            <Button
              key={key}
              type="button"
              variant={activeTab === key ? "default" : "outline"}
              size="sm"
              onClick={() => setActiveTab(key)}
              className="text-xs h-8"
            >
              {category.name}
            </Button>
          ))}
        </div>
      )}

      {/* R√©sultats de recherche */}
      {searchTerm && (
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Badge variant="outline">
            {filteredIcons.length} r√©sultat{filteredIcons.length > 1 ? 's' : ''}
          </Badge>
        </div>
      )}

      {/* Grille d'ic√¥nes */}
      <div className="grid grid-cols-10 gap-1 max-h-48 overflow-y-auto border rounded-lg p-2">
        {filteredIcons.map((icon) => (
          <Button
            key={icon}
            type="button"
            variant={selectedIcon === icon ? "default" : "outline"}
            size="sm"
            className="h-8 w-8 p-0 text-base hover:scale-110 transition-transform"
            onClick={() => onIconSelect(icon)}
            title={icon}
          >
            {icon}
          </Button>
        ))}
      </div>

      {filteredIcons.length === 0 && (
        <div className="text-center py-8 text-muted-foreground">
          <div className="text-4xl mb-2">üîç</div>
          <div>Aucune ic√¥ne trouv√©e</div>
        </div>
      )}

      {/* Ic√¥ne personnalis√©e */}
      <div className="border-t pt-3">
        <div className="text-sm font-medium mb-2">Ou saisir une ic√¥ne personnalis√©e :</div>
        <Input
          placeholder="Ex: üéØ"
          value={selectedIcon}
          onChange={(e) => onIconSelect(e.target.value)}
          className="text-center text-xl h-12"
          maxLength={4}
        />
      </div>
    </div>
  )
}